// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id         String @id @default(uuid())
  courseName String @unique
  Team       Team[]

  @@map("courses")
}

model Team {
  id       String @id @default(uuid())
  teamName String
  courseId String

  User    User[]
  courses Course    @relation(fields: [courseId], references: [id])
  WeekDay WeekDay[]

  @@unique([teamName, courseId])
  @@map("teams")
}

model WeekDay {
  id      String @id @default(uuid())
  weekDay Int
  teamId  String

  Team  Team    @relation(fields: [teamId], references: [id])
  Class Class[]

  @@unique([weekDay, teamId])
  @@map("week_days")
}

model Class {
  id        String   @id @default(uuid())
  hour      DateTime
  name      String
  weekDayId String
  WeekDay   WeekDay  @relation(fields: [weekDayId], references: [id])
  season    Season

  @@unique([hour, weekDayId])
  @@map("classes")
}

enum Season {
  MORNING
  AFTERNOON
  NOCTURNAL
}

enum Role {
  ADMIN
  STUDENT
  TEATCHER
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  teamId        String?
  role          Role      @default(STUDENT)

  accounts Account[]
  sessions Session[]
  teams    Team?     @relation(fields: [teamId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
